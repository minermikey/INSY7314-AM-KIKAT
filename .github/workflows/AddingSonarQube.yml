name: SonarQube

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for full SonarQube analysis

      # Step 2: Set up Java 17 (required by SonarQube scanner)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      # Step 3: Cache SonarQube packages
      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~/sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Step 4: Cache SonarQube scanner
      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      # Step 5: Install SonarQube scanner if not cached
      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path ${{ runner.temp }}/scanner -ItemType Directory -Force
          dotnet tool install dotnet-sonarscanner --tool-path ${{ runner.temp }}/scanner

      # Step 6: Build project and run SonarQube analysis
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          $scanner = "${{ runner.temp }}/scanner/dotnet-sonarscanner"
          & $scanner begin /k:"minermikey_INSY7314-AM-KIKAT" /o:"minermikey" /d:sonar.token="$env:SONAR_TOKEN"
          dotnet build MySolution.sln
          & $scanner end /d:sonar.token="$env:SONAR_TOKEN"
